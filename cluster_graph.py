import math
import networkx as nx
import osmnx as ox


class ClusterGraph:
    """
    ClusterGraph clusters a spatial NetworkX graph (from OSMnx) into
    clusters based on geographic proximity (radius-based, non-transitive), and builds a cluster-level graph with hyperedges.

    Each cluster is centered on a seed node, and includes only those nodes whose distance to the seed is <= threshold.

    Parameters
    ----------
    G : networkx.Graph
        A graph generated by OSMnx (nodes in lat/lng CRS).
    threshold : float
        Distance threshold in meters for clustering (default is 2000 m).

    Attributes
    ----------
    G_proj : networkx.Graph
        The input graph projected to a metric CRS (e.g., UTM).
    pos : dict
        Mapping of node -> (x, y) in projected CRS.
    node_to_cluster : dict
        Mapping of each original node to its cluster ID.
    clusters : dict
        Mapping of cluster ID -> set of original node IDs in that cluster.
    cluster_graph : networkx.Graph
        The resulting cluster-level graph.
    hyperedges : dict
        Mapping of frozenset({cluster_u, cluster_v}) -> list of original edges (u, v) connecting those clusters.
    """
    def __init__(self, G: nx.Graph, threshold: float = 2000.0):
        self.G_orig = G.to_undirected() if isinstance(G, nx.MultiDiGraph) else G.copy()
        self.nodes  = G.nodes()

        self.G_proj = ox.project_graph(G)
        g_ll = ox.project_graph(G, to_latlong=True)
        self.long_lat = {n: (d['x'], d['y']) for n, d in g_ll.nodes(data=True)}

        self.threshold = threshold
        self.node_to_cluster = {}
        self.clusters = {}
        self.hyperedges = {}
        self.cluster_graph = None

        self.cluster()

    def cluster(self) -> nx.Graph:

        Gp = self.G_proj
        unassigned = set(Gp.nodes())
        comps = []

        for seed in sorted(unassigned):
            if seed not in unassigned:
                continue
            lengths = nx.single_source_dijkstra_path_length(
                Gp, seed, cutoff=self.threshold, weight='length'
            )
            comp = set(lengths.keys())
            cid = len(comps)
            for n in comp:
                self.node_to_cluster[n] = cid
            comps.append(comp)
            unassigned -= comp

        self.clusters = {i: comp for i, comp in enumerate(comps)}

        C = nx.Graph()
        for cid, members in self.clusters.items():
            xs = [self.long_lat[n][0] for n in members]
            ys = [self.long_lat[n][1] for n in members]
            centroid = (sum(xs)/len(xs), sum(ys)/len(ys)) if members else (0,0)
            C.add_node(cid, members=list(members), centroid=centroid)

        for u, v, data in self.G_orig.edges(data=True):
            cu = self.node_to_cluster.get(u)
            cv = self.node_to_cluster.get(v)
            if cu is None or cv is None or cu == cv:
                continue
            key = frozenset((cu, cv))
            self.hyperedges.setdefault(key, []).append((u, v))
            if C.has_edge(cu, cv):
                C[cu][cv]['weight'] += 1
            else:
                C.add_edge(cu, cv, weight=1)

        self.cluster_graph = C
        return C

    def get_cluster_graph(self) -> nx.Graph:
        """
        Return the cluster-level graph, clustering if not already done.
        """
        if self.cluster_graph is None:
            return self.cluster()
        return self.cluster_graph

    def get_clusters(self) -> dict:
        """
        Return the dict mapping cluster ID to set of node IDs.

        Returns
        -------
        clusters : dict
            keys are cluster IDs, values are sets of original node IDs.
        """
        if not self.clusters:
            self.cluster()
        return self.clusters

    def get_hyperedges(self) -> dict:
        """
        Return the dict of hyperedges between clusters:
        keys are frozensets of cluster IDs, values are lists of original edges (u, v).
        """
        if not self.hyperedges:
            self.cluster()
        return self.hyperedges

    def get_node_coordinates(self,node_id):

        return self.long_lat[node_id]

    def get_cluster_coordinate(self,cluster_id):
        return self.cluster_graph.nodes[cluster_id]["centroid"]

if __name__ == "__main__":
    import utils
    G = utils.graph_from_file("Banja Luka")
    print("Graph obtained, ",G)
    cg = ClusterGraph(G, threshold=1000)
    print("Cluster graph obtained, ",cg)
    from random import choice
    print(nx.dijkstra_path(cg.get_cluster_graph(),choice(list(cg.get_cluster_graph().nodes())),choice(list(cg.get_cluster_graph().nodes())),"weight"))